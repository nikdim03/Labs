%macro init 5
	mov ax, %1
	mov bx, %2
	mov cx, %3
	mov dx, %4
	call %5
%endmacro


;===[ Начало сегмента кода ]=========================================================================
MYCODE: segment .code
org 100h; Обязательная директива для COM-файлов
START:;---[ Точка старта ]---------------------------------------------------------------------------



	;init 4,0,0,0, BXmultiplyByPowerOfTwo
	;init 2,0,0,0, BXmultiplyByAny
	;init 12a8h,0,0,0, AXapplyMask
	;init 12a8h,0,0,0, AXapplyMaskAndShift
	;init 1,2,3,0, BXcalculateExpressionOne
	;init 1,2,3,4, BXcalculateExpressionTwo
	;init 1234h,0,0,0, AXdigitSwap
	;init 0,0,8,0, BXgenerateNumber
	;init 5,2,0,0, CXifStatementOne
	;init 1,3,3,0, DXifStatementTwo
	init 0,0000000010111011b,8,0, BLcountOnes



;---[ Стандартное завершение программы ]-------------------------------------------------------------
	mov AX, 4C00h
	int 21h




;---[ Начало подпрограммы ]--------------------------------------------------------------------------
BXmultiplyByPowerOfTwo:
	mov bx, ax
	shl bx, 1

	ret
;---[ Конец подпрограммы ]---------------------------------------------------------------------------



;---[ Начало подпрограммы ]--------------------------------------------------------------------------
BXmultiplyByAny:
	mov bx, ax
	shl bx, 1
	add bx, ax

	ret
;---[ Конец подпрограммы ]---------------------------------------------------------------------------




;---[ Начало подпрограммы ]--------------------------------------------------------------------------
AXapplyMask:
	and ax, 000Fh

	ret
;---[ Конец подпрограммы ]---------------------------------------------------------------------------




;---[ Начало подпрограммы ]--------------------------------------------------------------------------
AXapplyMaskAndShift:
	and ax, 000Fh
	shl ax, 12

	ret
;---[ Конец подпрограммы ]---------------------------------------------------------------------------




;---[ Начало подпрограммы ]--------------------------------------------------------------------------
BXcalculateExpressionOne:
	shl ax, 2; ax = 4ax
	neg ax; ax = -4ax
	shl bx, 3; bx = 8bx
	add bx, ax; bx = -4ax + 8bx
	mov dx, cx; dx = cx
	shl dx, 2; dx = 4cx
	shl cx, 1; cx = 2cx
	add dx, cx; dx = 4cx + 2cx = 6cx
	add bx, dx; bx = 6cx - 4ax + 8bx

	ret
;---[ Конец подпрограммы ]---------------------------------------------------------------------------




;---[ Начало подпрограммы ]--------------------------------------------------------------------------
BXcalculateExpressionTwo:
	shl ax, 2; ax = 4ax
	neg ax; ax = -4ax
	shl bx, 3; bx = 8bx
	add bx, ax; bx = -4ax + 8bx
	mov ax, dx; ax = dx
	shl ax, 1; ax = 2dx
	add ax, dx; ax = 3dx
	neg ax; ax = -3dx
	mov dx, cx; dx = cx
	shl dx, 2; dx = 4cx
	shl cx, 1; cx = 2cx
	add dx, cx; dx = 4cx + 2cx = 6cx
	add bx, dx; bx = 6cx - 4ax + 8bx
	add bx, ax; bx = 6cx - 4ax + 8bx - 3dx

	ret
;---[ Конец подпрограммы ]---------------------------------------------------------------------------




;---[ Начало подпрограммы ]--------------------------------------------------------------------------
AXdigitSwap:
	mov bx, ax; bx = 1234
	and bx, 0F000h; bx = 1000
	shr bx, 8; bx = 0010

	mov cx, ax; cx = 1234
	and cx, 00F0h; cx = 0030
	shl cx, 8; cx = 3000

	add bx, cx; bx = 3010
	and ax, 0F0Fh; ax = 0204
	add ax, bx; ax = 3214

	ret
;---[ Конец подпрограммы ]---------------------------------------------------------------------------




;---[ Начало подпрограммы ]--------------------------------------------------------------------------
BXgenerateNumber:
	for1:
		shl ax, 2; ax *= 4
		inc ax; ax++
		cmp cx, 1; if cx == 1 => zf = 1 => end
		jnz nEnd; if not end go down
		shl ax, 1; ax *= 2
		nEnd:
	loop for1

	ret
;---[ Конец подпрограммы ]---------------------------------------------------------------------------




;---[ Начало подпрограммы ]--------------------------------------------------------------------------
CXifStatementOne:
	; if (ax-bx<=3) cx = 1111; else cx = ffff

	sub ax, bx; ax = ax - bx

	; cmp a, b => (a-1>b => sf = 0; a-1<=b => sf = 1)

	dec ax; a = a - 1
	cmp ax, 3h; ax - bx ? 3
	js le1; jump if less or equal
	jns g1; jump if greater

	le1:
	mov cx, 1111h; cx = 1111

	js le2; jump if less or equal

	g1:
	mov cx, 0ffffh; cx = ffff

	le2:

	ret
;---[ Конец подпрограммы ]---------------------------------------------------------------------------




;---[ Начало подпрограммы ]--------------------------------------------------------------------------
DXifStatementTwo:
	; if (ax != 9 && bx <= cx) dx = 1111; else dx = ffff

	cmp ax, 9; (ax == 9 => zf = 1) (ax != 9 => zf = 0)
	jz e; jump if equal


	; cmp a, b => (a-1>b => sf = 0; a-1<=b => sf = 1)
	dec bx; bx = bx - 1

	cmp bx, cx; (bx > cx => sf = 0; bx <= cx => sf = 1)
	jns g2; jump if greater

	mov dx, 1111h; dx = 1111

	js le; jump if less or equal

	g2:
	e:
	mov dx, 0ffffh; dx = 1000

	le:

	ret
;---[ Конец подпрограммы ]---------------------------------------------------------------------------




;---[ Начало подпрограммы ]--------------------------------------------------------------------------
BLcountOnes:
	for2:
		mov al, bl
		and al, 00000001b
		cmp al, 1; if (al == 1) zf = 1
        jnz notOne
        inc dl
        notOne:
		shr bl, 1
	loop for2
    mov bl, dl
	ret
;---[ Конец подпрограммы ]---------------------------------------------------------------------------




;===[ Начало сегмента данных ]=======================================================================

